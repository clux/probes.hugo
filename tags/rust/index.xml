<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on probes</title><link>https://clux.github.io/probes.hugo/tags/rust/</link><description>Recent content in rust on probes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>sszynrae@gmail.com (clux)</managingEditor><webMaster>sszynrae@gmail.com (clux)</webMaster><lastBuildDate>Sat, 06 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://clux.github.io/probes.hugo/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Talk log from KubeCon LA</title><link>https://clux.github.io/probes.hugo/post/2021-11-06-kubecon-la-log/</link><pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes.hugo/post/2021-11-06-kubecon-la-log/</guid><description>&lt;p>First KubeCon in a while I haven&amp;rsquo;t done anything for (didn&amp;rsquo;t even buy an ticket). This post is largely for myself, but thought I&amp;rsquo;d put some thoughts here public. All talks referenced were recently published on the &lt;a href="https://www.youtube.com/c/cloudnativefdn/videos">CNCF youtube channel&lt;/a>, and the posts here are really just my notes (make of them what you will).&lt;/p></description></item><item><title>Evolution of kube</title><link>https://clux.github.io/probes.hugo/post/2021-02-28-kube-evolution/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes.hugo/post/2021-02-28-kube-evolution/</guid><description>&lt;p>After a quarter year of extensive improvements to &lt;a href="https://github.com/clux/kube-rs">kube&lt;/a>, it&amp;rsquo;s time to take a birds-eye view of what we got, and showcase some of the recent improvements. After all, it&amp;rsquo;s been about &lt;a href="https://github.com/clux/kube-rs/releases">40 kube releases&lt;/a>, one major version of &lt;a href="https://tokio.rs/">tokio&lt;/a>, one &lt;a href="https://github.com/clux/kube-rs/graphs/contributors">extremely prolific new contributor&lt;/a>, and one &lt;a href="https://www.youtube.com/watch?v=JmwnRcc2m2A">kubecon talk&lt;/a> since my (very outdated) &lt;a href="https://clux.github.io/probes.hugo/post/2019-06-04-towards-a-generic-kube-client">last blog post&lt;/a>.&lt;/p></description></item><item><title>A generic kubernetes client</title><link>https://clux.github.io/probes.hugo/post/2019-06-04-towards-a-generic-kube-client/</link><pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes.hugo/post/2019-06-04-towards-a-generic-kube-client/</guid><description>&lt;p>It&amp;rsquo;s been about a month since we released &lt;a href="https://github.com/clux/kube-rs">&lt;code>kube&lt;/code>&lt;/a>, a new rust client library for kubernetes. We &lt;a href="https://clux.github.io/probes.hugo/post/2019-04-29-rust-on-kubernetes">covered&lt;/a> the initial release, but it was full of naive optimism and uncertainty. Would the generic setup work with native objects? How far would it extend? Non-standard objects? Patch handling? Event handling? Surely, it&amp;rsquo;d be a fools errand to write an entire client library?&lt;/p>
&lt;p>With the last &lt;code>0.10.0&lt;/code> release, it&amp;rsquo;s now clear that the generic setup extends quite far. Unfortunately, this yak is hairy, even by yak standards.&lt;/p></description></item><item><title>Kubernetes operators in rust</title><link>https://clux.github.io/probes.hugo/post/2019-04-29-rust-on-kubernetes/</link><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes.hugo/post/2019-04-29-rust-on-kubernetes/</guid><description>&lt;p>When interacting with kubernetes it&amp;rsquo;s generally been standard practice to use either &lt;a href="https://github.com/kubernetes/client-go">client-go&lt;/a> via go, or &lt;code>kubectl&lt;/code> via shell.&lt;/p>
&lt;p>While these are good, non-controversial choices, the advancement of client libraries, and smarter openapi bindings, combined with the generics and procedural macros of &lt;a href="https://www.rust-lang.org/">rust-lang&lt;/a>, it&amp;rsquo;s now quite possible to write fully fledged kube operators, using slim rust kube clients.&lt;/p></description></item><item><title>shipcat introduction</title><link>https://clux.github.io/probes.hugo/post/2018-12-15-shipcat-introduction/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes.hugo/post/2018-12-15-shipcat-introduction/</guid><description>&lt;p>At &lt;a href="https://www.babylonhealth.com/">babylon health&lt;/a> we have a ton of microservices running on kubernetes that are, in turn, controlled by &lt;strong>hundreds of thousands of lines&lt;/strong> of autogenerated &lt;code>yaml&lt;/code>.&lt;/p>
&lt;p>So for our own sanity, we built &lt;a href="https://github.com/babylonhealth/shipcat">&lt;code>shipcat&lt;/code>&lt;/a> - a standardisation tool (powered by &lt;a href="https://www.rust-lang.org/">rust-lang&lt;/a> and &lt;a href="https://serde.rs/">serde&lt;/a>) to control the declarative format and lifecycle of every microservice.&lt;/p></description></item></channel></rss>