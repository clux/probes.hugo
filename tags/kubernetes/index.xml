<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on probes</title><link>https://clux.github.io/probes/tags/kubernetes/</link><description>Recent content in Kubernetes on probes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>sszynrae@gmail.com (clux)</managingEditor><webMaster>sszynrae@gmail.com (clux)</webMaster><lastBuildDate>Tue, 04 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://clux.github.io/probes/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>A generic kubernetes client</title><link>https://clux.github.io/probes/post/2019-06-04-towards-a-generic-kube-client/</link><pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes/post/2019-06-04-towards-a-generic-kube-client/</guid><description>&lt;p&gt;It&amp;rsquo;s been about a months since we released &lt;a href=&#34;https://github.com/clux/kube-rs&#34;&gt;&lt;code&gt;kube&lt;/code&gt;&lt;/a&gt;, a new rust client library for kubernetes. We wrote a &lt;a href=&#34;https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes&#34;&gt;blog post at the time explaining the initial setup&lt;/a&gt;, and while we did explore some high level concepts, everything was uncertain. Would the generic setup work with native objects? How far would it extend? Would it be a primarily deserializing type client? What about custom queries? Event handling? Surely, it&amp;rsquo;d be a fools errand to write an entire client library?&lt;/p&gt;
&lt;p&gt;With the last &lt;code&gt;0.10.0&lt;/code&gt; release, it&amp;rsquo;s now clear that the generic setup extends quite far. Unfortunately, this yak is hairy, even by yak standards.&lt;/p&gt;</description></item><item><title>Kubernetes operators in rust</title><link>https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/</link><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes/post/2019-04-29-rust-on-kubernetes/</guid><description>&lt;p&gt;When interacting with kubernetes it&amp;rsquo;s generally been standard practice to use either &lt;a href=&#34;https://github.com/kubernetes/client-go&#34;&gt;client-go&lt;/a&gt; via go, or &lt;code&gt;kubectl&lt;/code&gt; via shell.&lt;/p&gt;
&lt;p&gt;While these are good, non-controversial choices, the advancement of client libraries, and smarter openapi bindings, combined with the generics and procedural macros of &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;rust-lang&lt;/a&gt;, it&amp;rsquo;s now quite possible to write fully fledged kube operators, using slim rust kube clients.&lt;/p&gt;</description></item><item><title>Impersonating kube service accounts</title><link>https://clux.github.io/probes/post/2019-03-31-impersonating-kube-accounts/</link><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes/post/2019-03-31-impersonating-kube-accounts/</guid><description>&lt;p&gt;Authenticating with large kubernetes clusters often risks you dealing with complicated provider logic and sometimes policies outside your control.&lt;/p&gt;
&lt;p&gt;While controllers and operators authenticate with service accounts directly, this is only true inside the cluster. That is, unless you can impersonate the service account from outside.&lt;/p&gt;</description></item><item><title>Config management in rust</title><link>https://clux.github.io/probes/post/2018-12-15-config-management-in-rust/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><author>sszynrae@gmail.com (clux)</author><guid>https://clux.github.io/probes/post/2018-12-15-config-management-in-rust/</guid><description>&lt;p&gt;At &lt;a href=&#34;https://www.babylonhealth.com/&#34;&gt;babylon health&lt;/a&gt; we have a ton of microservices running on kubernetes that are, in turn, controlled by &lt;strong&gt;hundreds of thousands of lines&lt;/strong&gt; of autogenerated &lt;code&gt;yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So for our own sanity, we built &lt;a href=&#34;https://github.com/Babylonpartners/shipcat&#34;&gt;&lt;code&gt;shipcat&lt;/code&gt;&lt;/a&gt; - a standardisation tool (powered by &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;rust-lang&lt;/a&gt; and &lt;a href=&#34;https://serde.rs/&#34;&gt;serde&lt;/a&gt;) to control the declarative format and lifecycle of every microservice.&lt;/p&gt;</description></item></channel></rss>